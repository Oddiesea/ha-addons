name: Trigger Add-on Builds

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      addon_name:
        description: "Specific add-on to build (optional - leave empty to build all dependent add-ons)"
        required: false
        type: string
      version:
        description: "Version to build (optional - leave empty to use latest release)"
        required: false
        type: string

jobs:
  trigger-addons:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug inputs
        run: |
          echo "Manual Trigger: ${{ github.event_name }}"
          echo "addon_name: '${{ github.event.inputs.addon_name }}'"
          echo "version: '${{ github.event.inputs.version }}'"

      - name: Find dependent add-ons
        id: find-addons
        run: |
          ADDON_NAME="${{ github.event.inputs.addon_name }}"
          DEPENDENT_ADDONS=""

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "$ADDON_NAME" ]; then
            # Manual trigger with specific add-on
            DEPENDENT_ADDONS="$ADDON_NAME"
            echo "Manual trigger for specific add-on: $DEPENDENT_ADDONS"
          else
            # Function to check if an add-on depends on this repository
            check_addon_dependency() {
              local addon_dir="$1"
              local config_file="$addon_dir/config.json"
              if [ -f "$config_file" ]; then
                local url=$(jq -r '.url // empty' "$config_file")
                if [ -n "$url" ]; then
                  local repo=$(echo "$url" | sed -E 's|https?://github.com/([^/]+/[^/]+).*|\1|')
                  if [ "$repo" = "${{ github.repository }}" ]; then
                    echo "$(basename "$addon_dir")"
                  fi
                fi
              fi
            }

            # Find all add-on directories
            for addon_path in */; do
              if [ -d "$addon_path" ]; then
                addon_name=$(basename "$addon_path")
                if [[ ! "$addon_name" =~ ^(\.|_|\.github|docs|scripts)$ ]]; then
                  dependent=$(check_addon_dependency "$addon_path")
                  if [ -n "$dependent" ]; then
                    DEPENDENT_ADDONS="$DEPENDENT_ADDONS $dependent"
                  fi
                fi
              fi
            done
          fi

          echo "dependent_addons=$DEPENDENT_ADDONS" >> $GITHUB_OUTPUT
          echo "DEPENDENT_ADDONS=$DEPENDENT_ADDONS" >> $GITHUB_ENV
          echo "Found dependent add-ons: $DEPENDENT_ADDONS"

      - name: Find target repositories
        id: find-repos
        run: |
          TARGET_REPOS=""

          for addon in $DEPENDENT_ADDONS; do
            if [ -n "$addon" ] && [ -f "./$addon/config.json" ]; then
              image=$(jq -r '.image // empty' "./$addon/config.json")
              if [ -n "$image" ]; then
                target_repo=$(echo "$image" | sed -E 's|^[^/]+/([^/]+/[^/]+)/.*|\1|')
                if [ -n "$target_repo" ] && [ "$target_repo" != "$image" ]; then
                  if [[ ! "$TARGET_REPOS" =~ "$target_repo" ]]; then
                    if [ -z "$TARGET_REPOS" ]; then
                      TARGET_REPOS="$target_repo:$addon"
                    else
                      TARGET_REPOS="$TARGET_REPOS $target_repo:$addon"
                    fi
                  else
                    TARGET_REPOS=$(echo "$TARGET_REPOS" | sed "s|\($target_repo:[^[:space:]]*\)|\1,$addon|")
                  fi
                fi
              fi
            fi
          done

          echo "target_repos=$TARGET_REPOS" >> $GITHUB_OUTPUT
          echo "TARGET_REPOS=$TARGET_REPOS" >> $GITHUB_ENV
          echo "Target repositories and add-ons: $TARGET_REPOS"

      - name: Trigger builds on current repository
        if: steps.find-repos.outputs.target_repos != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          [ -z "$VERSION" ] && VERSION="${{ github.event.release.tag_name }}"

          for repo_addon_pair in $TARGET_REPOS; do
            source_repo=$(echo "$repo_addon_pair" | cut -d':' -f1)
            addons=$(echo "$repo_addon_pair" | cut -d':' -f2)

            echo "Processing source repo: $source_repo with add-ons: $addons"

            IFS=',' read -ra ADDON_ARRAY <<< "$addons"
            for addon in "${ADDON_ARRAY[@]}"; do
              if [ -n "$addon" ]; then
                echo "  - Triggering build for add-on: $addon"

                response=$(curl -s -w "%{http_code}" -X POST \
                  -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/oddiesea/ha-addons/dispatches" \
                  -d '{
                    "event_type": "addon_release",
                    "client_payload": {
                      "addon": "'"$addon"'",
                      "version": "'"$VERSION"'",
                      "source_repo": "'"$source_repo"'"
                    }
                  }')

                http_code=$(echo "$response" | tail -c 4)
                if [ "$http_code" = "204" ]; then
                  echo "    ✓ Successfully triggered build for $addon from $source_repo"
                else
                  echo "    ✗ Failed to trigger build for $addon from $source_repo (HTTP: $http_code)"
                  echo "    Response: $(echo "$response" | head -c -4)"
                fi
              fi
            done
          done